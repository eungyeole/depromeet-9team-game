{"version":3,"sources":["styles/globalStyle.ts","components/LoadingSpinner.tsx","components/Selector.tsx","libs/axios/index.ts","libs/apis/room.ts","pages/MainPage.tsx","pages/RoomPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["globalStyle","css","LoadingSpinner","version","id","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","fill","d","attributeName","attributeType","type","dur","from","to","repeatCount","Selector","topics","value","name","onChange","Block","map","i","index","styled","select","instance","axios","create","baseURL","timeout","interceptors","request","use","config","error","Promise","reject","response","data","url","method","roomId","MainPage","useState","setTopics","loading","setLoading","localStorage","topic","form","setForm","history","useHistory","useEffect","a","roomAPI","then","res","console","log","onChangeHandler","e","target","setItem","onSubmit","preventDefault","alert","push","className","Form","placeholder","onClick","answer","prompt","div","RoomPage","match","users","setUsers","isStart","setIsStart","isAnimation","setIsAnimation","setSelect","subject","setSubject","stompClient","useRef","result","setResult","code","params","getItem","connect","ws","SockJS","current","Stomp","over","onConnected","msg","subscribe","JSON","parse","body","message","memberResponses","userVoteResponseList","winner","oldUsers","filter","publish","destination","onSelect","getCount","countObject","length","count","disconnect","stringify","username","suspendName","Modal","text","onCopy","Button","down","keyframes","opacity","props","App","Layout","styles","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8100f706.chunk.js","sourcesContent":["import { css } from \"@emotion/react\";\n\nexport const globalStyle = css`\n  @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR&display=swap');\n  *{\n    margin: 0;\n    padding: 0;\n    font-family: 'Noto Sans KR', sans-serif;\n    list-style: none;\n    box-sizing: border-box;\n  }\n  a{\n    text-decoration: none;\n  }\n  body{\n    margin: 0;\n    background: black;\n    color: white;\n  }\n`;","import { FC } from \"react\";\n\nconst LoadingSpinner: FC = () => {\n    return(\n        <svg version=\"1.1\" id=\"L9\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" enableBackground=\"new 0 0 0 0\" xmlSpace=\"preserve\">\n            <path fill=\"#fff\" d=\"M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50\">\n                <animateTransform attributeName=\"transform\" attributeType=\"XML\" type=\"rotate\" dur=\"1s\" from=\"0 50 50\" to=\"360 50 50\" repeatCount=\"indefinite\"></animateTransform>\n            </path>\n        </svg>\n    )\n}\nexport default LoadingSpinner;","import { ChangeEvent, FC, useRef } from \"react\";\nimport styled from '@emotion/styled';\n\ninterface Props {\n    topics: string[],\n    onChange: (e: ChangeEvent<HTMLSelectElement>) => void,\n    value: string,\n    name: string,\n}\nconst Selector: FC<Props> = ({topics, value, name, onChange}) => {\n    return(\n        <Block value={value} name={name} onChange={onChange}>\n            {topics.map((i, index)=><option key={index} value={i}>{i}</option>)}\n        </Block>\n            \n    )\n}\nexport default Selector;\n\n\nconst Block = styled.select`\n\n    & select {\n        display: none;\n    }\n`","import axios, { AxiosError } from 'axios'\n\nconst instance = axios.create({\n    baseURL: \"http://211.38.86.92:8010\",\n    timeout: 10000\n});\ninstance.interceptors.request.use(\n    function (config) {\n        return config;\n    }, \n    function (error : AxiosError) {\n        return Promise.reject(error);\n    }\n);\ninstance.interceptors.response.use(\n    function (response) {\n        return response;\n    },\n\n    function (error : AxiosError) {\n        return Promise.reject(error);\n    }\n);\nexport default instance;","import { RoomCreateData } from \"../../pages/MainPage\"\nimport request from \"../axios\"\nexport default {\n    createRoom(data: RoomCreateData){\n        return request({\n            url: \"/room\",\n            method: \"POST\",\n            data\n        })\n    },\n    getTopics(){\n        return request({\n            url: \"/topic\",\n            method: \"GET\",\n        })\n    },\n    getUsers(roomId: string){\n        return request({\n            url: `/chatroom/${roomId}`,\n            method: \"GET\"\n        })\n    }\n}","import styled from '@emotion/styled';\nimport { useEffect } from 'react';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { FC } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport Selector from '../components/Selector';\nimport roomAPI from '../libs/apis/room';\n\nexport interface RoomCreateData {\n    topic: string,\n    name: string,\n}\nconst MainPage: FC = () => {\n    const [topics, setTopics] = useState<string[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [form, setForm] = useState<RoomCreateData>({\n        name: localStorage.name,\n        topic: \"음식\",\n    });\n    const history = useHistory();\n    const { topic, name } = form;\n    useEffect(()=>{\n        (async()=>{\n            const { data } = await roomAPI.getTopics();\n            setTopics(data.topics);\n\n        })()\n        .then((res)=>console.log(res));\n    },[])\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        const { name, value } = e.target; \n        name===\"name\" && localStorage.setItem(\"name\", value);\n        setForm({\n            ...form, \n            [name]: value\n        })\n    }\n    const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if(loading) { return }\n        if(!name) { alert(\"닉네임을 입력하세요!\"); return } \n        setLoading(true);\n        try{\n            const { data } = await roomAPI.createRoom(form);\n            history.push(`/room/${data}`);\n        } catch(e){\n            alert(\"실패\");\n        } \n        setLoading(false);\n    }\n    const onJoin = () => {\n        if(name){\n            const answer = prompt(\"초대코드를 입력하세요: \");\n            answer && history.push(`/room/${answer}`);\n        }\n        else alert(\"닉네임을 입력하세요!\");   \n    }\n    return(\n        <Block>\n            <div className=\"title\">\n                <div className=\"title__name\">🤑 <b>9조</b>를 벌었조</div>\n                <b>'라이어'</b> 게임으로 친해지길 바라\n                <div>In 디프만</div>\n            </div>\n            <Form onSubmit={onSubmit} className=\"\">\n                <input onChange={onChangeHandler} value={name} name=\"name\" placeholder=\"닉네임을 입력해주세요.\"></input>\n                <Selector value={topic} name=\"topic\" topics={topics} onChange={onChangeHandler}></Selector>\n                <button type=\"submit\">\n                    {loading && <LoadingSpinner/>}\n                    방 만들기\n                </button>\n                <button onClick={onJoin} type=\"button\" className=\"outer\">초대코드로 입장</button>\n            </Form>\n        </Block>\n    )\n}\nexport default MainPage;\n\n\nconst Block = styled.div`\n    padding-top: 80px;\n    & .title{\n        font-weight: 500;\n        font-size: 30px;\n        &__name{\n            font-weight: 700;\n            font-size: 50px;\n            \n        }\n        & b{\n            color: #38e3a8;\n        }\n    }\n`\n\n\nconst Form = styled.form`\n    margin-top: 100px;\n    display: flex;\n    flex-direction: column;\n    & input{\n        outline: none;\n        border: 1px solid #38e3a8;\n        color: #38e3a8;\n        background: transparent;\n        padding: 10px;\n        &::placeholder{\n            color: #38e3a8;\n        }\n    }\n    & select{\n        outline: none;\n        margin-top: 10px;\n        width: 100px;\n        margin-left: auto;\n        border: 1px solid #38e3a8;\n        background: transparent;\n        color: #38e3a8;\n        padding: 5px;\n        border-radius: 5px;\n        cursor: pointer;\n    }\n    & button{\n        outline: none;\n        border: none;\n        display: flex;\n        background: transparent;\n        align-items: center;\n        height: 50px;\n        font-size: 14px;\n        justify-content: center;\n        cursor: pointer;\n        border: 1px solid #38e3a8;\n        background:#38e3a8;\n        margin: 0 30px;\n        color: white;\n        left: 0;\n        border-radius: 5px;\n        margin-top: 20px;\n        width: calc( 100% - 60px );\n        & svg{\n            width: 30px;\n        }\n        transition: 0.3s;\n        position: absolute;\n        bottom: 100px;\n        &.outer{\n            background: transparent;\n            color: #38e3a8;\n            bottom: 30px;\n        }\n    }\n    \n`","import { useEffect, useRef } from \"react\";\nimport { FC } from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\nimport styled from '@emotion/styled';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport * as StompJs from '@stomp/stompjs';\nimport SockJS from \"sockjs-client\";\nimport { CompatClient, Stomp } from \"@stomp/stompjs\";\nimport { useState } from \"react\";\nimport roomAPI from '../libs/apis/room';\nimport { keyframes } from '@emotion/react';\n\ninterface Props {\n    code: string,\n}\n   \nconst RoomPage: FC<RouteComponentProps<Props>> = ({match}) => {\n    const [users, setUsers] = useState<string[]>([]);\n    const [isStart, setIsStart] = useState<boolean>(false);\n    const [isAnimation, setIsAnimation] = useState<boolean>(false);\n    const [select, setSelect] = useState<string>(\"\");\n    const [subject, setSubject] = useState(\"\");\n    const stompClient = useRef<any>(null);\n    const [result, setResult] = useState<any>([]);\n    const history = useHistory();\n    const { code } = match.params;\n    const name = localStorage.getItem(\"name\");\n    \n    function connect(){\n        const ws = new SockJS(\"http://211.38.86.92:8010/websocket\");\n        stompClient.current = Stomp.over(ws);\n        stompClient.current.connect({}, onConnected, (msg: any)=>console.log(msg))\n    }\n    function onConnected(){\n        stompClient.current.subscribe(`/sub/chatroom/${code}`, (msg: any)=>{\n            const { type, message, memberResponses, userVoteResponseList, winner } = JSON.parse(msg.body);\n            type===\"JOIN\" && setUsers((oldUsers)=>[...oldUsers, message])\n            if(type===\"START\"){\n                setIsStart(true);\n                setIsAnimation(true);\n                const result = memberResponses.filter((data: any)=>data.name===name);\n                setSubject(result[0].subject);\n            }\n            type===\"VOTE\" && setResult(userVoteResponseList); \n            if(type===\"VOTE_END\") {\n                setIsStart(false);\n                setSubject(\"\");\n                setSelect(\"\");\n                setResult([]);\n                \n                alert(`${winner}의 승리`);\n\n            }\n            \n        \n        });\n        stompClient.current.publish({\n            destination: `/pub/chatroom/${code}`,\n            body: name,\n        })\n    }\n    function onStart(){\n        stompClient.current.publish({\n            destination: `/pub/game/${code}`,\n        })\n    }\n    function onStop(){ \n        stompClient.current.publish({\n            destination: `/pub/game/finish/${code}`,\n        })\n    }\n    function onSelect(name: string){\n        isStart && setSelect(name);\n    }\n    useEffect(()=>{\n        !name && history.push(\"/\");\n        (async()=>{\n            const { data } = await roomAPI.getUsers(code);\n            setUsers(data);\n            connect();\n        })()\n        \n        return () => stompClient.current.disconnect();\n    },[])\n    useEffect(()=>{\n        select && stompClient.current.publish({\n            destination: `/pub/vote/${code}`,\n            body: JSON.stringify({\n                username: name,\n                suspendName: select\n            })\n        })\n    },[select])\n    function getCount(a: string){\n        const countObject = result.filter((data:any)=>data.name === a);\n        return countObject.length===0 ? 0 : countObject[0].count\n    }\n    return(\n        <>\n            {isAnimation && \n                <Modal subject={subject}>\n                    <div className=\"close\" onClick={()=>setIsAnimation(false)}>X</div>\n                    <div className=\"title__sub\">제시어</div>\n                    { subject && <div className=\"title__main\">{subject}</div> }\n                </Modal>\n            }\n            <Block>\n                <div className=\"invite-code\">\n                    초대코드는\n                    <CopyToClipboard text={code} onCopy={()=>alert(\"복사완료!\")}>\n                        <span>{code}</span>\n                    </CopyToClipboard>\n                    입니다.\n                </div>  \n                <div className=\"list\">\n                    <div className=\"list__title\">접속 현황 (<span> {users.length} </span> 명)</div>\n                    <ul className=\"list__wrap\">\n                        {users.map((i, index)=>(select===i ? \n                            <li className=\"select\" onClick={()=>onSelect(i)} key={index}>\n                                <div className=\"name\">{i}</div>\n                                <div className=\"count\">{getCount(i)} 표</div>\n                            </li> \n                            : <li onClick={()=>onSelect(i)} key={index}>\n                                <div className=\"name\">{i}</div>\n                                <div className=\"count\">{getCount(i)} 표</div>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n                { isStart ? \n                    <Button onClick={onStop}>투표 종료</Button>\n                : <Button onClick={onStart}>시작하기</Button> \n                }\n            </Block>\n        </>\n    )\n}\nexport default RoomPage;\n\nconst Block = styled.div`\n    & .invite-code{\n        display: flex;\n        align-items: center;\n        & span{\n            margin: 0 10px;\n            font-size: 25px; \n            cursor: pointer;\n            color: #38e3a8;\n        }\n    }\n    & .list{\n        margin-top: 30px;\n        &__title{\n            font-size: 20px;\n            & span{\n                color: #38e3a8;\n            }\n        }\n        &__wrap{\n            margin-top: 10px;\n            display: flex;\n            flex-wrap: wrap;\n            & li {\n                display: flex;\n                align-items: center;\n                flex-direction: column;\n                justify-content: center;\n                border: 1px solid white;\n                margin: 10px;\n                height: 80px;\n                width: calc( 100%/3 - 20px );\n                cursor: pointer;\n                &.select{\n                    border: 1px solid #38e3a8;\n                    color: #38e3a8;\n                    \n                }\n                & .count{\n                    font-size: 12px;\n                }\n            }\n        }\n\n    }\n`\n\nconst Button = styled.div`\n    display: flex;\n    align-items: center;\n    height: 50px;\n    margin: 0 30px;\n    justify-content: center;\n    cursor: pointer;\n    left: 0;\n    border: 1px solid #38e3a8;\n    color: #38e3a8;\n    border-radius: 5px;\n    margin-top: 10px;\n    position: absolute;\n    width: calc( 100% - 60px );\n    bottom: 30px;\n    transition: 0.3s;\n    &:hover{\n        background: #38e3a8;\n        color: white;\n    }\n`\n\nconst down = keyframes`\n    from {\n        height: 0%;\n    }\n    to {\n        height: 100%;\n    }\n`\n\nconst opacity = keyframes`\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n`\n\nconst Modal = styled.div<{subject: string}>`\n    position: fixed;\n    background: ${props=>props.subject===\"lier\" ? \"#ff6f6e\" : \"#38e3a8\"};\n    left: 0;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    z-index: 99;\n    animation: ${down} 1.5s ease;\n    & .title{\n        &__sub{\n            animation: ${opacity} 3s ease;\n            font-size: 25px;\n            font-weight: regular;\n        }\n        &__main{\n            animation: ${opacity} 3s ease;\n            font-size: 80px;\n            font-weight: bold;\n        }\n    }\n    & .close{\n        position: absolute;\n        right: 10px;\n        top: 10px;\n        width: 45px;\n        height: 45px;\n        font-size: 20px;\n        border-radius: 50%;\n        border: 1px solid white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n    }\n`","import { Global } from '@emotion/react'\nimport { globalStyle } from './styles/globalStyle';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport styled from '@emotion/styled';\nimport RoomPage from './pages/RoomPage';\nfunction App() {\n  return (\n    <Layout>\n      <Global styles={globalStyle}></Global>\n      <Router>\n        <Route path=\"/room/:code\" component={RoomPage} exact></Route>\n        <Route path=\"/\" component={MainPage} exact></Route> \n      </Router> \n    </Layout>\n  );\n}\n\nexport default App;\n\nconst Layout = styled.div`\n  margin: 0 auto;\n  max-width: 512px;\n  width: 100%;\n  height: 100vh;\n  padding: 0 30px;\n  position: relative;\n`","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}